function x=f_gauss(A,b)% Subrotina para resolver um sistema de equações algébricas lineares% pelo método de Gaussn=length(b);[nr,nc]=size(A);% Verificação da matriz A e do vetor bif nr ~= nc    error('Matriz dos coeficientes não é quadrada.')endif nr ~= n    error('Matriz A e vetor b têm dimensões diferentes.')end% Verificando se a matriz A é singular (estima o número de equações% linearmente independentes)if det(A) == 0    fprintf('\n Rank=%7.3g\n',rank(A))    error('A matriz A é singular.')endunit=diag(ones(1,n));order=[1:n];aug=[A b];	% Matriz aumentada% Método de eliminação de Gauss eliminationfor k=1:n-1    pivot=abs(aug(k,k));    prow=k;    pcol=k;               %     Localiza o elemento pivô máximo    for row=k:n        for col=k:n            if abs(aug(row,col)) > pivot                pivot=abs(aug(row,col));                prow=row;                pcol=col;            end        end    end        pivo_max=pivot;    [k,pivo_max];        %     Troca de linhas    pr=unit;    tmp=pr(k,:);    pr(k,:)=pr(prow,:);    pr(prow,:)=tmp;    aug=pr*aug;        %     Troca as colunas    pc=unit;    tmp=pc(k,:);    pc(k,:)=pc(pcol,:);    pc(pcol,:)=tmp;    aug(1:n,1:n)=aug(1:n,1:n) * pc;    order=order*pc;        %     Reduz a zero os elementos abaixo da diagonal na coluna k    lk=unit;    for m=k + 1:n        lk(m,k)=- aug(m,k) / aug(k,k);    end    aug=lk * aug;endx=zeros(n,1);% Aplica a retro-substituiçãot(n)=aug(n,n + 1) / aug(n,n);x(order(n))=t(n);for k=n-1:-1:1    t(k)=(aug(k,n+1) - sum(aug(k,k+1:n) .* t(k+1:n))) / aug(k,k);    x (order(k))=t(k);endendfunction